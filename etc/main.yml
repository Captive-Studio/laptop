---
- hosts: localhost
  connection: local
  remote_user: root
  vars_prompt:
    - name: "user_email"
      prompt: "Email (optional)"
      private: no
    - name: "user_name"
      prompt: "FirstName LastName (optional)"
      private: no
  vars:
    github_access_token: ""
    user_workspace: "{{ansible_env.HOME}}/Workspace"
    ssh_id_rsa: "{{ansible_env.HOME}}/.ssh/id_rsa"
    ssh_id_rsa_pub: "{{ssh_id_rsa}}.pub"
    java_package_version: '15'
    atom_package_state: absent

    composer_packages: []

    gem_packages:
      - name: cocoapods
        version: 1.10.0

    pip_packages: []

    apt_packages: []

    homebrew_taps:
      - wix/brew

    homebrew_packages:
      - applesimutils
      - ruby-build
      - jenv

    homebrew_cask_packages:
      - google-drive
      - spectacle

    vscode_extensions:
      - eamodio.gitlens
      - EditorConfig.EditorConfig
      - ms-vsliveshare.vsliveshare
      - wayou.vscode-todo-highlight
      - gitlab.gitlab-workflow
      - github.vscode-pull-request-github
      - visualstudioexptteam.vscodeintel

    # sketch_plugins:
    #   - https://github.com/BaguetteEngineering/annotations-sketch-plugin/releases/latest/download/annotations.sketchplugin.zip

    appstore_signin_dialog: yes
    appstore_installed_apps:
      - { id: 497799835, name: "Xcode" }

    npm_packages:
      - name: yarn

  pre_tasks:
    - name: Check if Password is correct
      become: true
      command: echo "Password is correct"
      run_once: true
      tags:
        - always
      ignore_errors: no
      changed_when: false

    - name: Include specific OSX configuration
      include_tasks: "main.osx.yml"
      when: ansible_os_family == 'Darwin'

    - name: Include specific Debian configuration
      include_tasks: "main.debian.yml"
      when: ansible_os_family == 'Debian'

  roles:
    - { role: ansible-role-buildessential, become: true, ignore_errors: yes, tags: ['always'] }
    - { role: ansible-role-zsh, become: true, ignore_errors: yes, tags: ['console'] }
    - { role: ansible-role-git, become: true, ignore_errors: yes, tags: ['scm'] }
    - { role: ansible-role-keepass, ignore_errors: yes, tags: ['always'] }
    - { role: ansible-role-mercurial, become: true, ignore_errors: yes, tags: ['scm'] }
    - { role: ansible-role-slack, ignore_errors: yes, tags: ['com'] }
    - { role: ansible-role-docker, become: true, ignore_errors: yes }
    - { role: ansible-role-virtualbox, become: true, ignore_errors: yes }
    # - { role: ansible-role-nodejs, become: true, ignore_errors: yes, tags: ['js'] }
    - { role: ansible-role-java, become: true, ignore_errors: yes, tags: ['java', 'android'] }
    - { role: ansible-role-visualstudiocode, become: true, ignore_errors: yes, tags: ['ide'] }
    - { role: ansible-role-androidstudio, become: false, ignore_errors: yes, tags: ['ide', 'android'] }
    - { role: ansible-role-androidtools, become: true, ignore_errors: yes, tags: ['ide', 'android'] }
    - { role: ansible-role-react-native-debugger, become: true, ignore_errors: yes, tags: ['ios', 'android', 'react'] }
    - { role: ansible-role-flipper-debugger, become: true, ignore_errors: yes, tags: ['ios', 'android', 'react'] }
    - { role: ansible-role-chrome, become: true, ignore_errors: yes, tags: ['browser', 'web'] }
    - { role: ansible-role-chromedriver, become: true, ignore_errors: yes }
    - { role: ansible-role-notion, become: true, ignore_errors: yes, tags: ['com'] }
    - { role: ansible-role-term, ignore_errors: yes, tags: ['console'] }
    - { role: ansible-role-watchman, become: true, ignore_errors: yes, tags: ['console'] }
    - { role: ansible-role-webp, become: true, ignore_errors: yes, tags: ['image'] }
    # - { role: ansible-role-appstore, ignore_errors: yes, when: appstore_installed_apps, tags: ['appstore'] }
    - { role: ansible-role-postman, ignore_errors: yes, tags: ['api', 'web'] }
    - { role: ansible-role-drawio, ignore_errors: yes, tags: ['schema', 'diagram'] }
    - { role: ansible-role-nvm, become: true, ignore_errors: yes, tags: ['lang', 'node'] }
    - { role: ansible-role-rbenv, become: true, ignore_errors: yes, tags: ['lang', 'ruby'] }
    - { role: ansible-role-terraform, become: true, ignore_errors: yes, tags: ['devops'] }

  tasks:

    - name: Install global Composer packages.
      composer:
        command: "{{ (item.state | default('present') == 'absent') | ternary('remove', 'require') }}"
        arguments: "{{ item.name | default(item) }} {{ item.version | default('@stable') }}"
        # Ansible 2.4 supports `global_command` making `working_dir` optional.
        working_dir: "{{ lookup('env', 'COMPOSER_HOME') | default('~/.composer', true) }}"
      with_items: "{{ composer_packages }}"
      ignore_errors: yes

    - name: Install global NPM packages.
      npm:
        name: "{{ item.name | default(item) }}"
        state: "{{ item.state | default('present') }}"
        version: "{{ item.version | default(omit) }}"
        global: yes
        executable: "{{ item.executable | default(omit) }}"
      with_items: "{{ npm_packages }}"
      ignore_errors: yes
      become: false

    - name: Install global Pip packages.
      pip:
        name: "{{ item.name | default(item) }}"
        state: "{{ item.state | default('present') }}"
        version: "{{ item.version | default(omit) }}"
        executable: "{{ item.executable | default(omit) }}"
      with_items: "{{ pip_packages }}"
      ignore_errors: yes

    - name: Install global Ruby gems.
      community.general.gem:
        name: "{{ item.name | default(item) }}"
        state: "{{ item.state | default('present') }}"
        version: "{{ item.version | default(omit) }}"
        user_install: no
        executable: "{{ item.executable | default(omit) }}"
      with_items: "{{ gem_packages }}"
      become: true
      ignore_errors: yes

    - name: Add SSH Known Hosts
      known_hosts:
        path: /etc/ssh/ssh_known_hosts
        name: "{{ item }}"
        key: "{{ lookup('pipe', 'ssh-keyscan -t rsa ' + item) }}"
      with_items:
        - github.com
        - gitlab.com
        - bitbucket.org
      become: true
      ignore_errors: yes

    - name: Ensure ~/Workspace exists
      file: >
          state=directory
          name="{{ user_workspace }}"
          owner={{ ansible_env.USER }}
      ignore_errors: yes

    - name: Install VSCode extensions
      vscode:
        name: "{{item}}"
        state: present
      with_items: "{{ vscode_extensions }}"
      tags: ['ide', 'vscode']
      ignore_errors: yes

    - name: Set GIT diff
      git_config:
        name: diff.tool
        scope: global
        value: "vscode"
      become: false
      tags: ['git']

    - name: Set GIT code.editor
      git_config:
        name: core.editor
        scope: global
        value: "{{ visualstudiocode_git_editor }}"
      become: false
      tags: ['git']

    - name: Set GIT user.email
      git_config:
        name: user.email
        scope: global
        value: "{{ user_email }}"
      become: false
      when: user_email| length > 0
      tags: ['git']

    - name: Set GIT user.name
      git_config:
        name: user.name
        scope: global
        value: "{{ user_name }}"
      become: false
      when: user_name| length > 0
      tags: ['git']

    - name: Check if SSH key exists
      stat:
        path: "{{ ssh_id_rsa }}"
      register: ssh_id_rsa_stat

    - name: Create SSH key
      command: >
          ssh-keygen -t rsa -b 4096 -C "{{ansible_env.USER}}@{{ inventory_hostname_short }}" -N '' -o -f {{ ssh_id_rsa }}
          creates={{ ssh_id_rsa_pub }}
      when: ssh_id_rsa_stat.stat.exists == False

    # - name: Read SSH public key to authorize
    #   shell: cat {{ssh_id_rsa_pub}}
    #   register: ssh_pub_key
